/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var h=(s,e)=>{for(var t in e)l(s,t,{get:e[t],enumerable:!0})},u=(s,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of c(e))!d.call(s,n)&&n!==t&&l(s,n,{get:()=>e[n],enumerable:!(i=p(e,n))||i.enumerable});return s};var v=s=>u(l({},"__esModule",{value:!0}),s);var f={};h(f,{default:()=>o});module.exports=v(f);var a=require("obsidian"),m={triggerWord:""},o=class extends a.Plugin{async onload(){console.log("Auto Reveal plugin loaded"),await this.loadSettings(),this.addSettingTab(new r(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",async e=>{if(!e)return;if(console.log("File opened:",e.path),this.settings.triggerWord&&!e.path.includes(this.settings.triggerWord)){console.log(`File path "${e.path}" does not contain "${this.settings.triggerWord}". Skipping reveal.`);return}if(!this.app.workspace.getLeavesOfType("file-explorer")[0]){console.warn("File explorer is not open.");return}setTimeout(()=>{var g;let i=this.app;((g=i.commands)==null?void 0:g.commands["file-explorer:reveal-active-file"])?(i.commands.executeCommandById("file-explorer:reveal-active-file"),console.log("Executed reveal command")):console.warn("Reveal command not found")},300)}))}onunload(){console.log("Auto Reveal plugin unloaded")}async loadSettings(){this.settings=Object.assign({},m,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},r=class extends a.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Auto Reveal Settings"}),new a.Setting(e).setName("Trigger Word").setDesc("Only reveal the file in the explorer if its path contains this word (case-sensitive). Leave empty to always reveal.").addText(t=>t.setPlaceholder("e.g., Daily Notes").setValue(this.plugin.settings.triggerWord).onChange(async i=>{this.plugin.settings.triggerWord=i,await this.plugin.saveSettings()}))}};
