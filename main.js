/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var v=(a,s)=>{for(var t in s)c(a,t,{get:s[t],enumerable:!0})},B=(a,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let n of m(s))!b.call(a,n)&&n!==t&&c(a,n,{get:()=>s[n],enumerable:!(e=d(s,n))||e.enumerable});return a};var C=a=>B(c({},"__esModule",{value:!0}),a);var w={};v(w,{default:()=>r});module.exports=C(w);var o=require("obsidian"),f={enableAutoReveal:!0,whitelist:"",blacklist:"",autoCloseAllProperties:!1,gitButtonLocation:"ribbon"},r=class extends o.Plugin{constructor(){super(...arguments);this.executeGitCloseCommand=async()=>{let t=this.app,e="obsidian-git:backup-and-close";try{await t.commands.executeCommandById(e),new o.Notice("Attempting to commit, sync, and close Obsidian.")}catch(n){console.error("Error executing Obsidian Git command:",n),new o.Notice("Error executing Git command.")}}}async onload(){console.log("Auto Reveal plugin loaded"),await this.loadSettings(),this.addSettingTab(new h(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",async t=>{if(!t||!this.settings.enableAutoReveal)return;console.log("File opened:",t.path);let e=this.settings.whitelist.split(",").map(i=>i.trim()).filter(i=>i!==""),n=this.settings.blacklist.split(",").map(i=>i.trim()).filter(i=>i!==""),l=!0;if(e.length>0&&(l=e.some(i=>t.path.includes(i)),!l)){console.log(`File path "${t.path}" does not contain any of the whitelisted words. Skipping reveal.`);return}if(n.length>0&&(l=!n.some(i=>t.path.includes(i)),!l)){console.log(`File path "${t.path}" contains one of the blacklisted words. Skipping reveal.`);return}if(!this.app.workspace.getLeavesOfType("file-explorer")[0]){console.warn("File explorer is not open.");return}setTimeout(()=>{var p;let i=this.app,g=(p=i.commands)==null?void 0:p.commands["file-explorer:reveal-active-file"];g&&l?(i.commands.executeCommandById("file-explorer:reveal-active-file"),console.log("Executed reveal command")):g||console.warn("Reveal command not found")},300)})),this.app.workspace.onLayoutReady(()=>{this.settings.autoCloseAllProperties&&this.checkAndCloseAllProperties(),this.manageGitCloseButton()})}onunload(){console.log("Auto Reveal plugin unloaded"),this.removeAllGitCloseButtons()}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings),this.manageGitCloseButton()}async checkAndCloseAllProperties(){setTimeout(()=>{this.app.workspace.iterateAllLeaves(t=>{if(t.getViewState().type==="all-properties")return t.detach(),console.log("Closed 'All Properties' tab."),!0})},500)}async manageGitCloseButton(){var l,u;let t=this.app,e=t.plugins.getPlugin("obsidian-git"),n="obsidian-git:backup-and-close";if(!e||!((u=(l=t.commands)==null?void 0:l.commands)!=null&&u[n])){this.removeAllGitCloseButtons(),new o.Notice(e?`Obsidian Git command '${n}' not found.`:"Obsidian Git plugin not found.");return}this.settings.gitButtonLocation==="ribbon"||this.settings.gitButtonLocation==="both"?this.ribbonGitCloseButton||(this.ribbonGitCloseButton=this.addRibbonIcon("git-fork","Commit, Sync & Close",this.executeGitCloseCommand)):this.removeRibbonButton(),this.settings.gitButtonLocation==="statusbar"||this.settings.gitButtonLocation==="both"?this.statusBarGitCloseButton||(this.statusBarGitCloseButton=this.addStatusBarItem(),this.statusBarGitCloseButton.setText("Git Close"),this.statusBarGitCloseButton.addClass("auto-reveal-git-close-button"),this.statusBarGitCloseButton.addEventListener("click",this.executeGitCloseCommand)):this.removeStatusBarButton(),this.settings.gitButtonLocation==="none"&&(this.removeRibbonButton(),this.removeStatusBarButton())}removeAllGitCloseButtons(){this.removeRibbonButton(),this.removeStatusBarButton()}removeRibbonButton(){this.ribbonGitCloseButton&&this.ribbonGitCloseButton.remove&&(this.ribbonGitCloseButton.remove(),this.ribbonGitCloseButton=void 0)}removeStatusBarButton(){this.statusBarGitCloseButton&&(this.statusBarGitCloseButton.remove(),this.statusBarGitCloseButton=void 0)}},h=class extends o.PluginSettingTab{constructor(s,t){super(s,t),this.plugin=t}display(){let{containerEl:s}=this;s.empty(),s.createEl("h2",{text:"Auto Reveal Settings"}),new o.Setting(s).setName("Enable Auto Reveal").setDesc("Master toggle to enable or disable the automatic revealing of the active file in the file explorer.").addToggle(t=>t.setValue(this.plugin.settings.enableAutoReveal).onChange(async e=>{this.plugin.settings.enableAutoReveal=e,await this.plugin.saveSettings()})),new o.Setting(s).setName("Whitelist").setDesc("Only reveal the file if its path contains at least one of these words (case-sensitive), separated by commas. Only active if 'Enable Auto Reveal' is on. Leave empty to disable whitelist.").addText(t=>t.setPlaceholder("e.g., Daily,Project A").setValue(this.plugin.settings.whitelist).onChange(async e=>{this.plugin.settings.whitelist=e,await this.plugin.saveSettings()})),new o.Setting(s).setName("Blacklist").setDesc("Never reveal the file if its path contains any of these words (case-sensitive), separated by commas. Only active if 'Enable Auto Reveal' is on.").addText(t=>t.setPlaceholder("e.g., Archive,Temp").setValue(this.plugin.settings.blacklist).onChange(async e=>{this.plugin.settings.blacklist=e,await this.plugin.saveSettings()})),new o.Setting(s).setName("Auto Close 'All Properties'").setDesc("Automatically close the 'All Properties' tab in the core Properties view on Obsidian startup.").addToggle(t=>t.setValue(this.plugin.settings.autoCloseAllProperties).onChange(async e=>{this.plugin.settings.autoCloseAllProperties=e,await this.plugin.saveSettings()})),new o.Setting(s).setName("Git Button Location").setDesc("Choose where the 'Commit, Sync & Close' button should appear.").addDropdown(t=>t.addOptions({ribbon:"Ribbon",statusbar:"Status Bar",both:"Both",none:"None"}).setValue(this.plugin.settings.gitButtonLocation).onChange(async e=>{this.plugin.settings.gitButtonLocation=e,await this.plugin.saveSettings()}))}};
