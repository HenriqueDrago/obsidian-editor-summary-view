/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var v=(a,e)=>{for(var t in e)c(a,t,{get:e[t],enumerable:!0})},w=(a,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of u(e))!m.call(a,i)&&i!==t&&c(a,i,{get:()=>e[i],enumerable:!(s=d(e,i))||s.enumerable});return a};var b=a=>w(c({},"__esModule",{value:!0}),a);var y={};v(y,{default:()=>l});module.exports=b(y);var n=require("obsidian"),f={enableAutoReveal:!0,whitelist:"",blacklist:"",autoCloseAllProperties:!1,showGitCloseButton:!0},l=class extends n.Plugin{async onload(){console.log("Auto Reveal plugin loaded"),await this.loadSettings(),this.addSettingTab(new r(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",async e=>{if(!e||!this.settings.enableAutoReveal)return;console.log("File opened:",e.path);let t=this.settings.whitelist.split(",").map(o=>o.trim()).filter(o=>o!==""),s=this.settings.blacklist.split(",").map(o=>o.trim()).filter(o=>o!==""),i=!0;if(t.length>0&&(i=t.some(o=>e.path.includes(o)),!i)){console.log(`File path "${e.path}" does not contain any of the whitelisted words. Skipping reveal.`);return}if(s.length>0&&(i=!s.some(o=>e.path.includes(o)),!i)){console.log(`File path "${e.path}" contains one of the blacklisted words. Skipping reveal.`);return}if(!this.app.workspace.getLeavesOfType("file-explorer")[0]){console.warn("File explorer is not open.");return}setTimeout(()=>{var p;let o=this.app,g=(p=o.commands)==null?void 0:p.commands["file-explorer:reveal-active-file"];g&&i?(o.commands.executeCommandById("file-explorer:reveal-active-file"),console.log("Executed reveal command")):g||console.warn("Reveal command not found")},300)})),this.app.workspace.onLayoutReady(()=>{this.settings.autoCloseAllProperties&&this.checkAndCloseAllProperties(),this.maybeAddGitCloseButton()}),this.app.workspace.on("active-leaf-change",()=>{this.maybeAddGitCloseButton()})}onunload(){console.log("Auto Reveal plugin unloaded")}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async checkAndCloseAllProperties(){setTimeout(()=>{this.app.workspace.iterateAllLeaves(e=>{if(e.getViewState().type==="all-properties")return e.detach(),console.log("Closed 'All Properties' tab."),!0})},500)}async maybeAddGitCloseButton(){let e=this.app;this.settings.showGitCloseButton&&!this.gitCloseButton?setTimeout(()=>{var s;if(e.plugins.getPlugin("obsidian-git")){let i="obsidian-git:backup-and-close";(s=e.commands)!=null&&s.commands&&e.commands.commands[i]?this.gitCloseButton=this.addRibbonIcon("git-fork","Commit, Sync & Close",async()=>{try{await e.commands.executeCommandById(i),new n.Notice("Attempting to commit, sync, and close Obsidian.")}catch(h){console.error("Error executing Obsidian Git command:",h),new n.Notice("Error executing Git command.")}}):new n.Notice(`Obsidian Git command '${i}' not found.`)}else new n.Notice("Obsidian Git plugin not found.")},1e3):!this.settings.showGitCloseButton&&this.gitCloseButton&&(this.gitCloseButton.remove&&this.gitCloseButton.remove(),this.gitCloseButton=void 0)}},r=class extends n.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Auto Reveal Settings"}),new n.Setting(e).setName("Enable Auto Reveal").setDesc("Master toggle to enable or disable the automatic revealing of the active file in the file explorer.").addToggle(t=>t.setValue(this.plugin.settings.enableAutoReveal).onChange(async s=>{this.plugin.settings.enableAutoReveal=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Whitelist").setDesc("Only reveal the file if its path contains at least one of these words (case-sensitive), separated by commas. Only active if 'Enable Auto Reveal' is on. Leave empty to disable whitelist.").addText(t=>t.setPlaceholder("e.g., Daily,Project A").setValue(this.plugin.settings.whitelist).onChange(async s=>{this.plugin.settings.whitelist=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Blacklist").setDesc("Never reveal the file if its path contains any of these words (case-sensitive), separated by commas. Only active if 'Enable Auto Reveal' is on.").addText(t=>t.setPlaceholder("e.g., Archive,Temp").setValue(this.plugin.settings.blacklist).onChange(async s=>{this.plugin.settings.blacklist=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Auto Close 'All Properties'").setDesc("Automatically close the 'All Properties' tab in the core Properties view on Obsidian startup.").addToggle(t=>t.setValue(this.plugin.settings.autoCloseAllProperties).onChange(async s=>{this.plugin.settings.autoCloseAllProperties=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Show 'Commit, Sync & Close' Button").setDesc("Adds a button to the ribbon that executes the Obsidian Git command to commit, sync, and then close Obsidian (if Obsidian Git is installed).").addToggle(t=>t.setValue(this.plugin.settings.showGitCloseButton).onChange(async s=>{this.plugin.settings.showGitCloseButton=s,await this.plugin.saveSettings()}))}};
