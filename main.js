/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var v=(l,e)=>{for(var t in e)r(l,t,{get:e[t],enumerable:!0})},m=(l,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of u(e))!d.call(l,a)&&a!==t&&r(l,a,{get:()=>e[a],enumerable:!(i=h(e,a))||i.enumerable});return l};var A=l=>m(r({},"__esModule",{value:!0}),l);var w={};v(w,{default:()=>o});module.exports=A(w);var n=require("obsidian"),f={enableAutoReveal:!0,whitelist:"",blacklist:"",autoCloseAllProperties:!1},o=class extends n.Plugin{async onload(){console.log("Auto Reveal plugin loaded"),await this.loadSettings(),this.addSettingTab(new p(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",async e=>{if(!e||!this.settings.enableAutoReveal)return;console.log("File opened:",e.path);let t=this.settings.whitelist.split(",").map(s=>s.trim()).filter(s=>s!==""),i=this.settings.blacklist.split(",").map(s=>s.trim()).filter(s=>s!==""),a=!0;if(t.length>0&&(a=t.some(s=>e.path.includes(s)),!a)){console.log(`File path "${e.path}" does not contain any of the whitelisted words. Skipping reveal.`);return}if(i.length>0&&(a=!i.some(s=>e.path.includes(s)),!a)){console.log(`File path "${e.path}" contains one of the blacklisted words. Skipping reveal.`);return}if(!this.app.workspace.getLeavesOfType("file-explorer")[0]){console.warn("File explorer is not open.");return}setTimeout(()=>{var g;let s=this.app,c=(g=s.commands)==null?void 0:g.commands["file-explorer:reveal-active-file"];c&&a?(s.commands.executeCommandById("file-explorer:reveal-active-file"),console.log("Executed reveal command")):c||console.warn("Reveal command not found")},300)})),this.app.workspace.onLayoutReady(()=>{this.settings.autoCloseAllProperties&&this.checkAndCloseAllProperties()})}onunload(){console.log("Auto Reveal plugin unloaded")}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async checkAndCloseAllProperties(){setTimeout(()=>{this.app.workspace.iterateAllLeaves(e=>{if(e.getViewState().type==="all-properties")return e.detach(),console.log("Closed 'All Properties' tab."),!0})},500)}},p=class extends n.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Auto Reveal Settings"}),new n.Setting(e).setName("Enable Auto Reveal").setDesc("Master toggle to enable or disable the automatic revealing of the active file in the file explorer.").addToggle(t=>t.setValue(this.plugin.settings.enableAutoReveal).onChange(async i=>{this.plugin.settings.enableAutoReveal=i,await this.plugin.saveSettings()})),new n.Setting(e).setName("Whitelist").setDesc("Only reveal the file if its path contains at least one of these words (case-sensitive), separated by commas. Only active if 'Enable Auto Reveal' is on. Leave empty to disable whitelist.").addText(t=>t.setPlaceholder("e.g., Daily,Project A").setValue(this.plugin.settings.whitelist).onChange(async i=>{this.plugin.settings.whitelist=i,await this.plugin.saveSettings()})),new n.Setting(e).setName("Blacklist").setDesc("Never reveal the file if its path contains any of these words (case-sensitive), separated by commas. Only active if 'Enable Auto Reveal' is on.").addText(t=>t.setPlaceholder("e.g., Archive,Temp").setValue(this.plugin.settings.blacklist).onChange(async i=>{this.plugin.settings.blacklist=i,await this.plugin.saveSettings()})),new n.Setting(e).setName("Auto Close 'All Properties'").setDesc("Automatically close the 'All Properties' tab in the core Properties view on Obsidian startup.").addToggle(t=>t.setValue(this.plugin.settings.autoCloseAllProperties).onChange(async i=>{this.plugin.settings.autoCloseAllProperties=i,await this.plugin.saveSettings()}))}};
