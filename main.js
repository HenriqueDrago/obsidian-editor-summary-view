/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var u=(a,e)=>{for(var t in e)c(a,t,{get:e[t],enumerable:!0})},m=(a,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of g(e))!d.call(a,i)&&i!==t&&c(a,i,{get:()=>e[i],enumerable:!(n=h(e,i))||n.enumerable});return a};var v=a=>m(c({},"__esModule",{value:!0}),a);var w={};u(w,{default:()=>o});module.exports=v(w);var l=require("obsidian"),f={whitelist:"",blacklist:""},o=class extends l.Plugin{async onload(){console.log("Auto Reveal plugin loaded"),await this.loadSettings(),this.addSettingTab(new p(this.app,this)),this.registerEvent(this.app.workspace.on("file-open",async e=>{if(!e)return;console.log("File opened:",e.path);let t=this.settings.whitelist.split(",").map(s=>s.trim()).filter(s=>s!==""),n=this.settings.blacklist.split(",").map(s=>s.trim()).filter(s=>s!==""),i=!0;if(t.length>0&&(i=t.some(s=>e.path.includes(s)),!i)){console.log(`File path "${e.path}" does not contain any of the whitelisted words. Skipping reveal.`);return}if(n.length>0&&(i=!n.some(s=>e.path.includes(s)),!i)){console.log(`File path "${e.path}" contains one of the blacklisted words. Skipping reveal.`);return}if(!this.app.workspace.getLeavesOfType("file-explorer")[0]){console.warn("File explorer is not open.");return}setTimeout(()=>{var r;let s=this.app;((r=s.commands)==null?void 0:r.commands["file-explorer:reveal-active-file"])?(s.commands.executeCommandById("file-explorer:reveal-active-file"),console.log("Executed reveal command")):console.warn("Reveal command not found")},300)}))}onunload(){console.log("Auto Reveal plugin unloaded")}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},p=class extends l.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Auto Reveal Settings"}),new l.Setting(e).setName("Whitelist").setDesc("Only reveal the file if its path contains at least one of these words (case-sensitive), separated by commas. Leave empty to disable whitelist.").addText(t=>t.setPlaceholder("e.g., Daily,Project A").setValue(this.plugin.settings.whitelist).onChange(async n=>{this.plugin.settings.whitelist=n,await this.plugin.saveSettings()})),new l.Setting(e).setName("Blacklist").setDesc("Never reveal the file if its path contains any of these words (case-sensitive), separated by commas.").addText(t=>t.setPlaceholder("e.g., Archive,Temp").setValue(this.plugin.settings.blacklist).onChange(async n=>{this.plugin.settings.blacklist=n,await this.plugin.saveSettings()}))}};
